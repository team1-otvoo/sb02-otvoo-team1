name: CD Pipeline

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  check-merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - run: echo "PR merged into main. Starting CD pipeline."

  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}

    steps:
      - uses: actions/checkout@v3

      - name: Extract Git Commit SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - run: chmod +x ./gradlew

      - name: Build Spring Boot Jar
        run: ./gradlew clean build --no-daemon   # clean 추가, test.yml과 일관성 맞춤

      - name: Build and push Docker image
        env:
          ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          docker build -t $ECR_REPOSITORY_URI:$IMAGE_TAG -t $ECR_REPOSITORY_URI:latest .
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
          docker push $ECR_REPOSITORY_URI:latest

  # 2. ECS에 배포
  deploy-backend:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download current ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION }} --output json --query taskDefinition > task-def.json

      # -----------------------------------------------------
      # (변경) 신규 task-definition 파일에 이미지 태그 반영
      - name: Render new ECS Task Definition                  # 신규 스텝 추가
        id: render-task-def                                   # 추후 deploy에 연결 용이하게 id 지정
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json              # 기존 task-definition 경로 또는 json
          container-name: ${{ vars.ECS_CONTAINER_NAME }}                   # 컨테이너 이름 (task def 내 명칭)
          image: ${{ vars.ECR_REPOSITORY_URI }}:${{ needs.build-and-push-image.outputs.sha_short }} # 새 이미지 태그

      # (변경) v8 액션으로 deploy, image/container-name 파라미터 삭제, 대신 렌더링된 task-definition 사용
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v8        # v8 버전 사용 (변경)
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}  # render 스텝에서 생성된 task-def 사용
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Deployment Complete
        run: echo "Backend deployment completed successfully!"
