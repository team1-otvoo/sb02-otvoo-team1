name: CD Pipeline

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  # 0. PR 머지 확인 (dev → main merge)
  check-merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - run: echo "PR merged into main. Starting CD pipeline."

  # 1. 도커 이미지 빌드 및 ECR에 푸시
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}

    steps:
      - uses: actions/checkout@v3

      - name: Extract Git Commit SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - run: chmod +x ./gradlew

      - name: Build Spring Boot Jar
        run: ./gradlew clean build --no-daemon   # clean 추가, test.yml과 일관성 맞춤

      - name: Build and push Docker image
        env:
          ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          docker build -t $ECR_REPOSITORY_URI:$IMAGE_TAG -t $ECR_REPOSITORY_URI:latest .
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
          docker push $ECR_REPOSITORY_URI:latest

  # 2. ECS에 배포
  deploy-backend:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1   # v1 (안정된 버전 사용)
        with:
          task-definition: ${{ vars.ECS_TASK_DEFINITION }} # task-definition-family-name:revision
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true # 새 버전이 안정적으로 실행될 때까지 대기
          image: ${{ vars.ECR_REPOSITORY_URI }}:${{ needs.build-and-push-image.outputs.sha_short }}
          container-name: ${{ vars.ECS_CONTAINER_NAME }}

      - name: Deployment Complete
        run: echo "Backend deployment completed successfully!"
